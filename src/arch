import logging
import re
import openai
from openai import OpenAI
import os
from typing import List
from fastapi import FastAPI
from pathlib import Path
from fastapi.responses import HTMLResponse, PlainTextResponse
from pydantic import BaseModel

app = FastAPI()


email_pattern = r"[\w\.-]+@[\w\.-]+\.\w{2,4}"
phone_pattern = r"\b\d{10}\b"
api_key_pattern = r"(sk-[A-Za-z0-9]{20,}|Bearer\s+[A-Za-z0-9\-_]{20,}|api[_-]?key\s*=\s*[A-Za-z0-9\-_]{20,})"

openai.api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI() 


##################################
# Logger
logging.basicConfig(
    filename="app.log",
    level =logging.INFO,
    format = "%(asctime)s - %(levelname)s - %(message)s",
)

logger = logging.getLogger(__name__)

app = FastAPI()

class Prompt(BaseModel):
    text: str
    
##################################
# Endpoints
@app.get("/health")
def health():
    return {"message": "PromptSafely server running"}

@app.get("/", response_class = HTMLResponse)
def home():
    html_path = Path(__file__).parent.parent / "ui" / "prompt-ui.html"
    return HTMLResponse(content=html_path.read_text())
        
@app.post("/api/prompt")
def refine_prompt(prompt: Prompt):
    logger.info(f"User submitted prompt: {prompt.text}")
    redacted = re.sub(email_pattern,"[REDACTED EMAIL]",prompt.text)
    redacted = re.sub(phone_pattern, "[REDACTED_PHONE]", redacted)
    redacted = re.sub(api_key_pattern, "[REDACTED_API_KEY]", redacted)
    logger.info(f"Prompt send to OpenAI: {redacted}")
    
    response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": redacted},
    ]
    )
    
    return response.choices[0].message.content

@app.get("/logs")
def get_logs():
    try:
        with open("app.log") as f:
            return PlainTextResponse(f.read())
    except Exception as e:
        return PlainTextResponse(f"Error: {e}", status_code=500)
    
    
    
